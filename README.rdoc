
= rufus-jig

A HTTP client, greedy with JSON content, GETting conditionally.

Uses Patron (http://github.com/toland/patron) or em-http-request (http://github.com/igrigorik/em-http-request)
and Yajl-ruby (http://github.com/brianmario/yajl-ruby) whenever possible.

This library also contains some CouchDB helpers.

To select a HTTP transport layer for rufus-jig, just make sure you have loaded
the library before loading rufus-jig.

For net-http-persistent:

  require 'net/http/persistent'
  require 'rufus/jig'

For Patron:

  require 'patron'
  require 'rufus/jig'

For em-http-request:

  require 'em-http'
  require 'rufus/jig'

Please not that em-http-request-0.2.2 and earlier don't support the PUT and DELETE
verbs. Until a newer gem is released you'll need to build the em-http-request gem
from source.

== examples

=== HTTP client

Let's say we have an hypothetical document server.

getting...

  require 'net/http/persistent'
  require 'yajl'
  require 'rufus/jig'

  h = Rufus::Jig::Http.new('127.0.0.1', 4567)

  p @h.get('/document/xyz.json')
    #
    # => { "type" => "letter", "title" => "four birds" }
    #
    # if it's JSON, decodes it immediately

  r = @h.get('/document/xyz.txt')
  p [ r.status, r.body ]
    #
    # => [ 200, "letter:\n\nfour birds" ]

  j = @h.get('/document', :content_type => 'application/json')
  j = @h.get('/document', :content_type => :json)
    #
    # 'Accepts' JSON

posting...

  r = @h.post(
    '/documents', '<doc>four birds</doc>', :content_type => 'application/xml')
  p [ r.status, r.body ]
    #
    # => [ 201, "created." ]


=== Couch helpers

For the real thing : http://github.com/couchrest/couchrest
There is also the excellent : http://github.com/langalex/couch_potato

Warning : rufus-jig >= 0.1.18 is meant for CouchDB >= 0.11.

The class Rufus::Jig::Couch provides a get/put/delete trio that is couch-oriented. Json encoding/decoding is automatically handled as well as

put and delete return nil in case of success and true (conflict) or and exception else.

  require 'net/http/persistent'
  require 'yajl'
  require 'rufus/jig'

  c = Rufus::Jig::Couch.new('127.0.0.1', 5984, 'my_couch_db')

  c.put('_id' => 'coffee0', 'category' => 'espresso')
  c.put('_id' => 'coffee1', 'category' => 'instantaneous')

  doc0 = c.get('coffee0')
  doc1 = c.get('coffee1')

  c.delete(doc0)

  doc1['category'] => 'instant'
  c.put(doc1)

  c.delete(doc1['_id'], doc1['_rev'])

  # ...

  c.attach(
    doc0, 'picture', File.read('espresso.jpg'), :content_type => 'image/jpeg')
      # or
  c.attach(
    doc0['_id'], doc0['_rev'], 'picture', File.read('espresso.jpg'), :content_type => 'image/jpeg')

  picture = c.get('coffe0/picture')

  c.detach('coffee0', '1-x-newrevision-whatever', 'picture')


=== on_change

Continuous feed with a 20s heartbeat :

  db.on_change do |doc_id, deleted|
    puts "doc #{doc_id} has been #{deleted ? 'deleted' : 'changed'}"
  end
  
  db.on_change do |doc_id, deleted, doc|
    puts "doc #{doc_id} has been #{deleted ? 'deleted' : 'changed'}"
    p doc
  end

Please note the 3 param block, it includes the changed document (Note : this only work with CouchDB >= 0.11).

This is a blocking method (one may want to wrap it in a thread).


== rdoc

http://rufus.rubyforge.org/rufus-jig/


== testing

  rake

or

  rspec spec/

tests all (plain jig and CouchDB).

  rspec spec/jig

only tests the plain jig stuff.

  rspec spec/couch

only tests the CouchDB stuff.

By default net/http is used. To test with another HTTP lib :

  JIG_LIB=patron rspec spec/

You can specify patron/em/netp/net. Netp corresponds to http://seattlerb.rubyforge.org/net-http-persistent/


== known issues

- the EM based client cannot deal with non-ASCII paths


== mailing list

On the rufus-ruby list :

http://groups.google.com/group/rufus-ruby


== issue tracker

http://github.com/jmettraux/rufus-jig/issues


== irc

  irc.freenode.net #ruote


== the rest of Rufus

http://rufus.rubyforge.org


== authors

* John Mettraux, http://jmettraux.wordpress.com/
* Kenneth Kalmer, http://www.opensourcery.co.za/


== license

MIT

